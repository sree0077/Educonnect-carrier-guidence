name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Code Quality & Linting
  lint:
    name: 🔍 Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm run install:all

      - name: 🔍 Lint code
        run: npm run lint

  # Job 2: Build Applications
  build:
    name: 🏗️ Build Applications
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm run install:all

      - name: 🏗️ Build applications
        run: npm run build

      - name: 📦 Upload client build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-build
          path: client/dist/
          retention-days: 30

      - name: 📦 Upload server build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: server-build
          path: server/dist/
          retention-days: 30

  # Job 3: Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm run install:all

      - name: 🔍 Run security audit
        run: |
          npm audit --audit-level=high
          cd client && npm audit --audit-level=high
          cd ../server && npm audit --audit-level=high

  # Job 4: Deploy to Development
  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Download client artifacts
        uses: actions/download-artifact@v4
        with:
          name: client-build
          path: client/dist/

      - name: 📦 Download server artifacts
        uses: actions/download-artifact@v4
        with:
          name: server-build
          path: server/dist/

      - name: 🚀 Deploy to Development
        run: |
          echo "🚀 Deploying to development environment..."
          echo "📁 Client build files:"
          ls -la client/dist/
          echo "📁 Server build files:"
          ls -la server/dist/
          # Add your deployment commands here
          # Example: rsync, scp, or cloud deployment commands

  # Job 5: Deploy to Production
  deploy-prod:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Download client artifacts
        uses: actions/download-artifact@v4
        with:
          name: client-build
          path: client/dist/

      - name: 📦 Download server artifacts
        uses: actions/download-artifact@v4
        with:
          name: server-build
          path: server/dist/

      - name: 🚀 Deploy to Production
        run: |
          echo "🚀 Deploying to production environment..."
          echo "📁 Client build files:"
          ls -la client/dist/
          echo "📁 Server build files:"
          ls -la server/dist/
          # Add your production deployment commands here

  # Job 6: Notify on Success/Failure
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()

    steps:
      - name: 📢 Notify Success
        if: ${{ needs.deploy-dev.result == 'success' || needs.deploy-prod.result == 'success' }}
        run: |
          echo "✅ Deployment successful!"
          # Add notification logic (Slack, Discord, Email, etc.)

      - name: 📢 Notify Failure
        if: ${{ needs.deploy-dev.result == 'failure' || needs.deploy-prod.result == 'failure' }}
        run: |
          echo "❌ Deployment failed!"
          # Add notification logic for failures
